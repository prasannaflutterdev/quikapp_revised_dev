plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
    id 'com.google.gms.google-services'
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace = System.getenv("PKG_NAME") ?: "com.example.quickappproj"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        // Enable Java 8 features
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
        // Enable core library desugaring
        coreLibraryDesugaringEnabled true
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    defaultConfig {
        applicationId = System.getenv("PKG_NAME") ?: "com.example.quickappproj"
        minSdkVersion 21
        targetSdkVersion 34
        versionCode = System.getenv("VERSION_CODE")?.toInteger() ?: 1
        versionName = System.getenv("VERSION_NAME") ?: "1.0.0"
        
        // Enable multidex for large number of methods
        multiDexEnabled true
    }

    signingConfigs {
        release {
            if (keystoreProperties.containsKey('storeFile')) {
                storeFile = file(keystoreProperties['storeFile'])
                storePassword = keystoreProperties['storePassword']
                keyAlias = keystoreProperties['keyAlias']
                keyPassword = keystoreProperties['keyPassword']
            } else {
                // Fallback to environment variables (Codemagic CI)
                storeFile = file("keystore.jks")
                storePassword = System.getenv("CM_KEYSTORE_PASSWORD")
                keyAlias = System.getenv("CM_KEY_ALIAS")
                keyPassword = System.getenv("CM_KEY_PASSWORD")
            }
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.debug
            
            // Enable minification and shrinking
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            multiDexKeepProguard file('multidex-config.pro')
        }
        debug {
            signingConfig = signingConfigs.debug
            // Disable minification for debug builds
            minifyEnabled false
            shrinkResources false
        }
    }

    lint {
        disable 'InvalidPackage'
        checkReleaseBuilds false
    }
}

dependencies {
    // Add core library desugaring dependency
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.4'
    
    // Add multidex support
    implementation 'androidx.multidex:multidex:2.0.1'
    
    // Add Firebase BoM
    implementation platform('com.google.firebase:firebase-bom:32.7.4')
}

flutter {
    source = "../.."
}
