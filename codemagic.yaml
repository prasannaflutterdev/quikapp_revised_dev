definitions:
  # mac_mini_m1: &mac_mini_m1
  #  instance_type: mac_mini_m1
  # max_build_duration: 60

  environment:
    app_details:
      vars:
        VERSION_NAME: $VERSION_NAME
        VERSION_CODE: $VERSION_CODE
        KEY_STORE: $KEY_STORE
        CM_KEYSTORE_PASSWORD: $CM_KEYSTORE_PASSWORD
        CM_KEY_ALIAS: $CM_KEY_ALIAS
        CM_KEY_PASSWORD: $CM_KEY_PASSWORD
        APP_NAME: $APP_NAME
        ORG_NAME: $ORG_NAME
        IS_SPLASH: $IS_SPLASH
        SPLASH: $SPLASH
        SPLASH_BG: $SPLASH_BG
        SPLASH_BG_COLOR: $SPLASH_BG_COLOR
        SPLASH_TAGLINE: $SPLASH_TAGLINE
        SPLASH_TAGLINE_COLOR: $SPLASH_TAGLINE_COLOR
        SPLASH_ANIMATION: $SPLASH_ANIMATION
        SPLASH_DURATION: $SPLASH_DURATION
        LOGO_URL: $LOGO_URL
        WEB_URL: $WEB_URL
        firebase_config_android: $firebase_config_android
        firebase_config_ios: $firebase_config_ios
        APNS_KEY_ID: $APNS_KEY_ID
        APPLE_TEAM_ID: $APPLE_TEAM_ID
        APNS_AUTH_KEY_URL: $APNS_AUTH_KEY_URL
        PKG_NAME: $PKG_NAME
        BUNDLE_ID: $BUNDLE_ID
        EMAIL_ID: $EMAIL_ID
        PUSH_NOTIFY: $PUSH_NOTIFY
        IS_CAMERA: $IS_CAMERA
        IS_LOCATION: $IS_LOCATION
        IS_MIC: $IS_MIC
        IS_NOTIFICATION: $IS_NOTIFICATION
        IS_CONTACT: $IS_CONTACT
        IS_BIOMETRIC: $IS_BIOMETRIC
        IS_CALENDAR: $IS_CALENDAR
        IS_STORAGE: "true" # Always true by default
        IS_PULLDOWN: $IS_PULLDOWN
        IS_BOTTOMMENU: $IS_BOTTOMMENU
        BOTTOMMENU_ITEMS: $BOTTOMMENU_ITEMS
        BOTTOMMENU_BG_COLOR: $BOTTOMMENU_BG_COLOR
        BOTTOMMENU_ICON_COLOR: $BOTTOMMENU_ICON_COLOR
        BOTTOMMENU_TEXT_COLOR: $BOTTOMMENU_TEXT_COLOR
        BOTTOMMENU_ACTIVE_TAB_COLOR: $BOTTOMMENU_ACTIVE_TAB_COLOR
        BOTTOMMENU_ICON_POSITION: $BOTTOMMENU_ICON_POSITION
        BOTTOMMENU_VISIBLE_ON: $BOTTOMMENU_VISIBLE_ON
        IS_DEEPLINK: $IS_DEEPLINK
        IS_LOAD_IND: $IS_LOAD_IND

  artifacts:
    #- &ipa_file build/ios/ipa/*.ipa
    #- &xcode_log /tmp/xcodebuild_logs/*.log
    #- &dsym $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
    # - &app $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.app
    #    - &android_abb build/**/outputs/**/*.aab
    #    - &android_apk build/**/outputs/**/*.apk
    - &android_abb build/**/outputs/**/*.aab
    - &android_apk build/**/outputs/**/*.apk
    - &ios_app build/ios/ipa/*.ipa
    #- &android_mapping_txt build/**/outputs/**/mapping.txt
    #3- &flutter_drive_log flutter_drive.log

  email_release: &email_release
    email:
      recipients:
        - $EMAIL_ID
        # - thamaraikannan137@gmail.com
      notify:
        success: true
        failure: true

  scripts:
    - &debug_env
      name: Debug Environment Variables
      script: |
        echo "*********** App Name & Version ***********"
        echo "APP_NAME: $APP_NAME"
        echo "ORG_NAME: $ORG_NAME"
        echo "WEB_URL: $WEB_URL"
        echo "VERSION_NAME: $VERSION_NAME"           
        echo "VERSION_CODE: $VERSION_CODE" 
        echo "PKG_NAME: $PKG_NAME"
        echo "BUNDLE_ID: $BUNDLE_ID"

        echo "*********** App Customization Configuration ***********"
        echo "Splash screen: $IS_SPLASH"
        echo "Pull to refresh: $IS_PULLDOWN"
        echo "Loading indicators: $IS_LOAD_IND"
        echo "Bottom navigation bar: $IS_BOTTOMMENU"
        echo "Deep linking: $IS_DEEPLINK"

        echo "*********** Push Notification Configuration ***********"
        echo "PUSH_NOTIFY: $PUSH_NOTIFY"

        echo "*********** Android Keystore ***********"
        echo "KEY_STORE: $KEY_STORE"
        echo "CM_KEYSTORE_PASSWORD: $CM_KEYSTORE_PASSWORD"
        echo "CM_KEY_ALIAS: $CM_KEY_ALIAS"
        echo "CM_KEY_PASSWORD: $CM_KEY_PASSWORD"

        echo "*********** IOS Keystore ***********"
        echo "APNS_KEY_ID: $APNS_KEY_ID"
        echo "TEAM_ID: $APPLE_TEAM_ID"
        echo "APNS_AUTH_KEY_URL: $APNS_AUTH_KEY_URL"

        echo "*********** Firebase Android config file ***********"
        echo "firebase_config_android: $firebase_config_android"

        echo "*********** Firebase IOS config file ***********"
        echo "firebase_config_ios: $firebase_config_ios"

        echo "*********** Splash Configuration ***********"
        echo "SPLASH: $SPLASH"
        echo "SPLASH_BG:$SPLASH_BG"
        echo "SPLASH_BG_COLOR: $SPLASH_BG_COLOR"
        echo "SPLASH_TAGLINE: $SPLASH_TAGLINE"
        echo "SPLASH_TAGLINE_COLOR: $SPLASH_TAGLINE_COLOR"
        echo "SPLASH_ANIMATION: $SPLASH_ANIMATION"
        echo "SPLASH_DURATION: $SPLASH_DURATION"
                
        echo "*********** Bottom Navigation Configuration ***********"
        echo "BOTTOMMENU_ITEMS: $BOTTOMMENU_ITEMS"
        echo "BOTTOMMENU_BG_COLOR: $BOTTOMMENU_BG_COLOR"  
        echo "BOTTOMMENU_ICON_COLOR: $BOTTOMMENU_ICON_COLOR"
        echo "BOTTOMMENU_TEXT_COLOR: $BOTTOMMENU_TEXT_COLOR"
        echo "BOTTOMMENU_ACTIVE_TAB_COLOR: $BOTTOMMENU_ACTIVE_TAB_COLOR"
        echo "BOTTOMMENU_ICON_POSITION: $BOTTOMMENU_ICON_POSITION"
        echo "BOTTOMMENU_VISIBLE_ON: $BOTTOMMENU_VISIBLE_ON"

        echo "*********** Permissions ***********"
        echo "IS_CAMERA: $IS_CAMERA"
        echo "IS_LOCATION: $IS_LOCATION"
        echo "IS_MIC: $IS_MIC"
        echo "IS_NOTIFICATION: $IS_NOTIFICATION"
        echo "IS_CONTACT: $IS_CONTACT"
        echo "IS_BIOMETRIC: $IS_BIOMETRIC"
        echo "IS_CALENDAR: $IS_CALENDAR"

        echo "*********** Publish Configuration ***********"
        echo "EMAIL_ID: $EMAIL_ID"

    - &get_splash
      name: Get splash screen image from splash image from Url
      script: |
        if [ "$IS_SPLASH" = "true" ]; then
          echo "üöÄ Started: Downloading splash assets"

          mkdir -p assets/images/

          # Download splash logo
          echo "‚¨áÔ∏è Downloading splash logo from: $SPLASH"
          wget -O assets/images/splash.png "$SPLASH"
          if [ $? -ne 0 ]; then
            echo "‚ö†Ô∏è Certificate issue or download failed. Retrying with --no-check-certificate..."
            wget --no-check-certificate -O assets/images/splash.png "$SPLASH"
          fi

          if [ ! -f assets/images/splash.png ]; then
            echo "‚ùå Error: Failed to download SPLASH logo"
            exit 1
          fi

          # Download splash background (optional)
          if [ -n "$SPLASH_BG" ]; then
            echo "‚¨áÔ∏è Downloading splash background from: $SPLASH_BG"
            wget -O assets/images/splash_bg.png "$SPLASH_BG"
            if [ $? -ne 0 ]; then
              echo "‚ö†Ô∏è Certificate issue or download failed. Retrying with --no-check-certificate..."
              wget --no-check-certificate -O assets/images/splash_bg.png "$SPLASH_BG"
            fi

            if [ ! -f assets/images/splash_bg.png ]; then
              echo "‚ùå Error: Failed to download SPLASH background"
              exit 1
            fi
          else
            echo "‚ÑπÔ∏è No SPLASH_BG provided, skipping background download"
          fi

          flutter pub get
          echo "‚úÖ Completed: Splash assets downloaded"
        else
          echo "‚è≠Ô∏è Skipping splash asset download (IS_SPLASH != true)"
        fi

    - &change_proj_name
      name: Change Project Name
      script: |
        echo "App Name: $APP_NAME"
        # 2Ô∏è‚É£ Sanitize: lowercase, remove special characters, replace spaces with underscores
          SANITIZED_NAME=$(echo "$APP_NAME" | tr '[:upper:]' '[:lower:]' | tr -cd 'a-z0-9 ' | tr ' ' '_')

        # 3Ô∏è‚É£ Extract old name from pubspec.yaml
        OLD_NAME_LINE=$(grep '^name: ' pubspec.yaml)
        OLD_NAME=$(echo "$OLD_NAME_LINE" | cut -d ' ' -f2)

        echo "üîÅ Renaming project from '$OLD_NAME' to '$SANITIZED_NAME'..."

        # Update pubspec.yaml
        sed -i '' "s/^name: .*/name: $SANITIZED_NAME/" pubspec.yaml

        # Update Dart imports
          echo "üîÑ Updating Dart package imports..."
          grep -rl "package:$OLD_NAME" lib/ | xargs sed -i '' "s/package:$OLD_NAME/package:$SANITIZED_NAME/g"
          
         
          
          # iOS: Update CFBundleName in Info.plist
          echo "üõ†Ô∏è Updating iOS CFBundleName..."
          plutil -replace CFBundleName -string "$APP_NAME" ios/Runner/Info.plist
          
          # Optional: Rename folder (if not on CI/CD)
          # cd ..
          # mv "$OLD_NAME" "$SANITIZED_NAME"
          # cd "$SANITIZED_NAME"
          
          # Clean and get packages
          flutter clean
          flutter pub get
          
          echo "‚úÖ Project renamed to '$SANITIZED_NAME'"
          
          echo "üöÄ iOS CFBundleName set to '$APP_NAME'"

    - &get_logo
      name: Get logo image from logoUrl
      script: |
        echo "üöÄ Started: Downloading logo from $LOGO_URL"

        mkdir -p assets/images/

        # Try downloading with SSL certificate check first (silent test)
        wget --spider --quiet "$LOGO_URL"
        if [ $? -ne 0 ]; then
          echo "‚ö†Ô∏è SSL verification failed. Retrying with --no-check-certificate..."
          WGET_OPTS="--no-check-certificate"
        else
          WGET_OPTS=""
        fi

        # Attempt actual download
        wget $WGET_OPTS -O assets/images/logo.png "$LOGO_URL"

        # Check if the file was successfully downloaded
        if [ ! -f assets/images/logo.png ]; then
          echo "‚ùå Error: Failed to download logo from $LOGO_URL"
          exit 1
        fi

        flutter pub get
        echo "‚úÖ Completed: Logo downloaded"

    - &set_launcher_icons
      name: Generate Launcher Icons
      script: |
        echo "üöÄ Generating launcher icons"

          echo "üî¢ VERSION_NAME: $VERSION_NAME"
          echo "üî¢ VERSION_CODE: $VERSION_CODE"
           # Default values
          VERSION_NAME="${VERSION_NAME:-1.0.0}"
          VERSION_CODE="${VERSION_CODE:-100}"
          

          # Check if VERSION_NAME is empty or not set
          if [ -z "$VERSION_NAME" ]; then
            VERSION_NAME=$DEFAULT_VERSION_NAME
            echo "üî¢ Setting DEFAULT_VERSION_NAME"
          fi

          # Check if VERSION_CODE is empty or not set
          if [ -z "$VERSION_CODE" ]; then
            VERSION_CODE=$DEFAULT_VERSION_CODE
            echo "üî¢ Setting DEFAULT_VERSION_CODE"
          fi

          echo "üî¢ VERSION_NAME: $VERSION_NAME"
          echo "üî¢ VERSION_CODE: $VERSION_CODE"

          echo "üîß Ensuring valid version in pubspec.yaml: $VERSION_NAME+$VERSION_CODE"
          # Replace or add version line in pubspec.yaml
          if grep -q "^version: " pubspec.yaml; then
            sed -i.bak -E "s/^version: .*/version: $VERSION_NAME+$VERSION_CODE/" pubspec.yaml
          else
          echo "version: $VERSION_NAME+$VERSION_CODE" >> pubspec.yaml
          fi

           flutter pub get

           # Use updated command (deprecates `:main`)
           flutter pub run flutter_launcher_icons

           echo "‚úÖ Launcher icons generated successfully"

    - &change_app_name
      name: Change app name
      script: |
        echo "üöÄ Changing app name to: $APP_NAME"

          flutter pub run rename setAppName --value "$APP_NAME"
          echo "üî¢ VERSION_NAME: $VERSION_NAME"
          echo "üî¢ VERSION_CODE: $VERSION_CODE"
            # Default values
          VERSION_NAME="${VERSION_NAME:-1.0.0}"
          VERSION_CODE="${VERSION_CODE:-100}"

          # Check if VERSION_NAME is empty or not set
          if [ -z "$VERSION_NAME" ]; then
            VERSION_NAME=$DEFAULT_VERSION_NAME
            echo "üî¢ Setting DEFAULT_VERSION_NAME"
          fi

          # Check if VERSION_CODE is empty or not set
          if [ -z "$VERSION_CODE" ]; then
            VERSION_CODE=$DEFAULT_VERSION_CODE
            echo "üî¢ Setting DEFAULT_VERSION_CODE"
          fi

          echo "üî¢ VERSION_NAME: $VERSION_NAME"
          echo "üî¢ VERSION_CODE: $VERSION_CODE"

          echo "üîß Ensuring valid version in pubspec.yaml: $VERSION_NAME+$VERSION_CODE"
          # Replace or add version line in pubspec.yaml
          if grep -q "^version: " pubspec.yaml; then
            sed -i.bak -E "s/^version: .*/version: $VERSION_NAME+$VERSION_CODE/" pubspec.yaml
          else
          echo "version: $VERSION_NAME+$VERSION_CODE" >> pubspec.yaml
          fi

          flutter pub get

          echo "‚úÖ App name changed and version set successfully"

    - &Inject_Firebase_iOS_Push
      name: Firebase Push Notification Setup for iOS
      script: |
        if [ "$PUSH_NOTIFY" = "true" ]; then
          echo "üîî Enabling Firebase Push Notifications for iOS..."

          # 1. Download and apply Firebase config
          mkdir -p firebase/ios
          if [ -n "$firebase_config_ios" ]; then
            wget -O firebase/ios/GoogleService-Info.plist "$firebase_config_ios"
          fi

          if [ -f "firebase/ios/GoogleService-Info.plist" ]; then
            cp firebase/ios/GoogleService-Info.plist ios/Runner/GoogleService-Info.plist
            echo "‚úÖ GoogleService-Info.plist copied."
          else
            echo "‚ùå Missing GoogleService-Info.plist. Cannot proceed with Firebase setup."
            exit 1
          fi

          # 2. Add Firebase SDK (via committed Package.resolved)
          if [ -f "firebase/ios/Package.resolved" ]; then
            mkdir -p ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/
            cp firebase/ios/Package.resolved ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved
            echo "üì¶ Firebase SDK resolved from committed Package.resolved."
          else
            echo "‚ö†Ô∏è Package.resolved not found. Firebase SDK must be added manually in Xcode."
          fi

          # 3. Download APNs Auth Key if provided (Optional)
          if [ -n "$APNS_AUTH_KEY_URL" ]; then
            wget -O firebase/ios/AuthKey.p8 "$APNS_AUTH_KEY_URL"
            echo "üì• Downloaded AuthKey.p8 for APNs"
          fi

          # 4. Check APNs entitlements
          if grep -q "aps-environment" ios/Runner/Runner.entitlements; then
            echo "‚úÖ APNs entitlements already enabled."
          else
            echo "‚ö†Ô∏è Warning: Missing APNs entitlement in Runner.entitlements."
          fi
        else
          echo "üö´ PUSH_NOTIFY is false. Skipping Firebase push notification setup for iOS."
          rm -f ios/Runner/GoogleService-Info.plist
          rm -f ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved
          echo "üßπ Cleaned up Firebase iOS config."
        fi

    - &get_json
      name: Get JSON file
      script: |

        if [ "$PUSH_NOTIFY" = "true" ]; then
        echo "üì• Downloading google-services.json..."

        # Ensure target directories exist
        mkdir -p android/app
        mkdir -p assets

        # Try downloading with SSL verification first
        wget --spider --quiet "$firebase_config_android"
        if [ $? -ne 0 ]; then
        echo "‚ö†Ô∏è SSL verification failed. Retrying with --no-check-certificate..."
        WGET_OPTS="--no-check-certificate"
        else
        WGET_OPTS=""
        fi

        # Download the file(s) using determined option
        wget $WGET_OPTS -O android/app/google-services.json "$firebase_config_android"
        wget $WGET_OPTS -O assets/google-services.json "$firebase_config_android"
        else
        echo "üö´ Firebase config skipped (PUSH_NOTIFY is not true)"
        fi

    - &Inject_Firebase
      name: Inject Firebase and buildscript block
      script: |
        if [ "$PUSH_NOTIFY" = "true" ]; then
          echo "üì¶ Enabling Firebase integration..."

          # Check if Firebase classpath is already present
          if ! grep -q 'com.google.gms:google-services' android/build.gradle; then
            echo "‚úÖ Firebase classpath not found, injecting..."

            if ! grep -q 'buildscript {' android/build.gradle; then
              # No buildscript block found ‚Äì inject the entire block at the top
              sed -i '1s;^;buildscript {\n  repositories {\n    google()\n    mavenCentral()\n  }\n  dependencies {\n    classpath "com.google.gms:google-services:4.3.15"\n  }\n}\n\n;' android/build.gradle
              echo "‚úÖ Full buildscript block injected"
            else
              # buildscript exists ‚Äì insert the classpath into the dependencies
              sed -i '/buildscript {/,/}/ s/dependencies {/dependencies {\n    classpath "com.google.gms:google-services:4.3.15"/' android/build.gradle
              echo "‚úÖ Firebase classpath inserted into existing buildscript"
            fi
          else
            echo "‚úÖ Firebase classpath already present, skipping injection"
          fi
        else
          echo "üö´ Firebase config skipped (PUSH_NOTIFY is not true)"
        fi

    - &Update_SDK_Version
      name: Updating SDK Version for Android & iOS (Conditional)
      script: |
        if [ "$PUSH_NOTIFY" = "true" ]; then
          echo "üîß Updating Android and iOS SDK versions..."

          # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Android SDK Versions ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
          echo "üì± Updating Android minSdkVersion and targetSdkVersion in build.gradle"
          sed -i.bak 's/minSdkVersion\s*=.*$/minSdkVersion 21/' android/app/build.gradle
          sed -i.bak 's/targetSdkVersion\s*=.*$/targetSdkVersion 34/' android/app/build.gradle
          echo "‚úÖ Android SDK versions updated"

          # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ iOS Minimum Target Version ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
          echo "üçè Updating iOS minimum deployment target in Podfile..."
          PODFILE_PATH="ios/Podfile"

          if [ -f "$PODFILE_PATH" ]; then
            sed -i.bak -E "s/platform :ios, '[0-9.]+'/platform :ios, '12.0'/" "$PODFILE_PATH"
            echo "‚úÖ iOS minimum deployment target updated to 12.0"
          else
            echo "‚ö†Ô∏è Podfile not found. Skipping iOS deployment target update."
          fi

          # Optional: iOS project.pbxproj iOS Deployment Target
          IOS_PROJECT_FILE="ios/Runner.xcodeproj/project.pbxproj"
          if [ -f "$IOS_PROJECT_FILE" ]; then
            sed -i'' -e "s/IPHONEOS_DEPLOYMENT_TARGET = .*;/IPHONEOS_DEPLOYMENT_TARGET = 13.0;/" "$IOS_PROJECT_FILE"
            echo "‚úÖ Xcode project iOS deployment target updated to 12.0"
          fi
        else
          echo "üö´ SDK version update skipped (PUSH_NOTIFY is not true)"
        fi

    #    - &Update_App_Version
    #      name: Inject Version Info into pubspec, build.gradle (Android) & Xcode project (iOS)
    #      script: |
    #        # Default values
    #        VERSION_NAME="${VERSION_NAME:-1.0.0}"
    #        VERSION_CODE="${VERSION_CODE:-100}"
    #        # Check if VERSION_NAME is empty or not set
    #         if [ -z "$VERSION_NAME" ]; then
    #           VERSION_NAME=$DEFAULT_VERSION_NAME
    #           echo "üî¢ Setting DEFAULT_VERSION_NAME"
    #         fi
    #
    #         # Check if VERSION_CODE is empty or not set
    #         if [ -z "$VERSION_CODE" ]; then
    #           VERSION_CODE=$DEFAULT_VERSION_CODE
    #           echo "üî¢ Setting DEFAULT_VERSION_CODE"
    #         fi
    #
    #         echo "üî¢ VERSION_NAME: $VERSION_NAME"
    #         echo "üî¢ VERSION_CODE: $VERSION_CODE"
    #        echo "üîÑ Updating version to ${VERSION_NAME}+${VERSION_CODE}"
    #
    #        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ pubspec.yaml ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    #        sed -i'' -e "s/^version: .*/version: ${VERSION_NAME}+${VERSION_CODE}/" pubspec.yaml
    #        echo "‚úÖ Updated pubspec.yaml"
    #
    #        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Android build.gradle ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    #        echo "üîß Updating Android build.gradle..."
    #        sed -i'' -e "s/versionCode.*/versionCode ${VERSION_CODE}/" android/app/build.gradle
    #        sed -i'' -e "s/versionName \".*\"/versionName \"${VERSION_NAME}\"/" android/app/build.gradle
    #        echo "‚úÖ Android version updated: $VERSION_NAME ($VERSION_CODE)"
    #
    #        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ iOS: project.pbxproj ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    #        echo "üçè Updating iOS version info in project.pbxproj..."
    #        IOS_PROJECT_FILE="ios/Runner.xcodeproj/project.pbxproj"
    #
    #        if [ -f "$IOS_PROJECT_FILE" ]; then
    #          sed -i'' -e "s/MARKETING_VERSION = .*;/MARKETING_VERSION = ${VERSION_NAME};/" "$IOS_PROJECT_FILE"
    #          sed -i'' -e "s/CURRENT_PROJECT_VERSION = .*;/CURRENT_PROJECT_VERSION = ${VERSION_CODE};/" "$IOS_PROJECT_FILE"
    #          echo "‚úÖ iOS version updated: $VERSION_NAME ($VERSION_CODE)"
    #        else
    #          echo "‚ùå iOS project file not found at $IOS_PROJECT_FILE"
    #          exit 1
    #        fi
    #
    #
    #

    - &update_package_names
      name: Update Android & iOS Package Name / Bundle ID
      script: |
        echo "üîß Updating Android and iOS package name (bundle ID)..."

        # Validate package/bundle ID format (Java-style, dot-separated)
        if [[ ! "$PKG_NAME" =~ ^[a-zA-Z_][a-zA-Z0-9_]*(\.[a-zA-Z_][a-zA-Z0-9_]*)+$ ]]; then
        echo "‚ùå ERROR: Invalid package/bundle identifier: $PKG_NAME"
        exit 1
        fi

        echo "‚úî Package name / Bundle ID: $PKG_NAME"

               echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ANDROID UPDATE ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
               echo "üì¶ Updating Android package..."
               flutter pub run rename setBundleId --value "$PKG_NAME"

               # Update AndroidManifest.xml
               sed -i "s/package=\"[^\"]*\"/package=\"$PKG_NAME\"/g" android/app/src/main/AndroidManifest.xml
               # For macOS: sed -i '' ...
               sed -i "s/applicationId \"[^\"]*\"/applicationId \"$PKG_NAME\"/g" android/app/build.gradle

               echo "‚úÖ Android package updated."

               echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ iOS UPDATE ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
               echo "üçè Updating iOS bundle identifier..."
               IOS_PROJECT_PATH="ios/Runner.xcodeproj/project.pbxproj"

               if [ -f "$IOS_PROJECT_PATH" ]; then
                 sed -i "s/PRODUCT_BUNDLE_IDENTIFIER = .*;/PRODUCT_BUNDLE_IDENTIFIER = $BUNDLE_ID;/g" "$IOS_PROJECT_PATH"
                 echo "‚úÖ iOS bundle identifier updated."
               else
                 echo "‚ùå iOS project file not found at $IOS_PROJECT_PATH"
                 exit 1
               fi

    - &build_ipa
      name: Building iOS App with Feature Flags
      script: |
        if [ ! -f signing_cert.p12 ] || [ ! -f profile.mobileprovision ]; then
        echo "‚ùå Error: Certificates or provisioning profile missing."
        exit 1
        fi

        echo "üîë Setting up provisioning profile for build..."
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

        echo "‚úÖ Building iOS IPA..."
        flutter build ipa \
        --release \
        --dart-define=WEB_URL="$WEB_URL" \
        --dart-define=PUSH_NOTIFY="$PUSH_NOTIFY" \
        --dart-define=PKG_NAME="$PKG_NAME" \
        --dart-define=APP_NAME="$APP_NAME" \
        --dart-define=ORG_NAME="$ORG_NAME" \
        --dart-define=VERSION_NAME="$VERSION_NAME" \
        --dart-define=VERSION_CODE="$VERSION_CODE" \
        --dart-define=EMAIL_ID="$EMAIL_ID" \
        --dart-define=IS_SPLASH="$IS_SPLASH" \
        --dart-define=SPLASH="$SPLASH" \
        --dart-define=SPLASH_BG="$SPLASH_BG" \
        --dart-define=SPLASH_ANIMATION="$SPLASH_ANIMATION" \
        --dart-define=SPLASH_BG_COLOR="$SPLASH_BG_COLOR" \
        --dart-define=SPLASH_TAGLINE="$SPLASH_TAGLINE" \
        --dart-define=SPLASH_TAGLINE_COLOR="$SPLASH_TAGLINE_COLOR" \
        --dart-define=SPLASH_DURATION="$SPLASH_DURATION" \
        --dart-define=IS_PULLDOWN="$IS_PULLDOWN" \
        --dart-define=LOGO_URL="$LOGO_URL" \
        --dart-define=IS_BOTTOMMENU="$IS_BOTTOMMENU" \
        --dart-define=BOTTOMMENU_ITEMS="$BOTTOMMENU_ITEMS" \
        --dart-define=BOTTOMMENU_BG_COLOR="$BOTTOMMENU_BG_COLOR" \
        --dart-define=BOTTOMMENU_ICON_COLOR="$BOTTOMMENU_ICON_COLOR" \
        --dart-define=BOTTOMMENU_TEXT_COLOR="$BOTTOMMENU_TEXT_COLOR" \
        --dart-define=BOTTOMMENU_ACTIVE_TAB_COLOR="$BOTTOMMENU_ACTIVE_TAB_COLOR" \
        --dart-define=BOTTOMMENU_ICON_POSITION="$BOTTOMMENU_ICON_POSITION" \
        --dart-define=BOTTOMMENU_VISIBLE_ON="$BOTTOMMENU_VISIBLE_ON" \
        --dart-define=IS_DEEPLINK="$IS_DEEPLINK" \
        --dart-define=IS_LOAD_IND="$IS_LOAD_IND" \
        --dart-define=IS_CAMERA="$IS_CAMERA" \
        --dart-define=IS_LOCATION="$IS_LOCATION" \
        --dart-define=IS_BIOMETRIC="$IS_BIOMETRIC" \
        --dart-define=IS_MIC="$IS_MIC" \
        --dart-define=IS_CONTACT="$IS_CONTACT" \
        --dart-define=IS_CALENDAR="$IS_CALENDAR" \
        --dart-define=IS_NOTIFICATION="$IS_NOTIFICATION" \
        --dart-define=IS_STORAGE="$IS_STORAGE" \
        --dart-define=APNS_KEY_ID="$APNS_KEY_ID" \
        --dart-define=APPLE_TEAM_ID="$APPLE_TEAM_ID" \
        --dart-define=APNS_AUTH_KEY_URL="$APNS_AUTH_KEY_URL" \
        --dart-define=KEY_STORE="$KEY_STORE" \
        --dart-define=CM_KEYSTORE_PASSWORD="$CM_KEYSTORE_PASSWORD" \
        --dart-define=CM_KEY_ALIAS="$CM_KEY_ALIAS" \
        --dart-define=CM_KEY_PASSWORD="$CM_KEY_PASSWORD" \
        --export-options-plist=ExportOptions.plist > flutter_build_ios.log

        echo "‚úÖ IPA build completed successfully."

        echo "üßπ Cleaning up certificates and profiles..."
        security delete-keychain build.keychain
        rm -rf ios_certificates
        rm -f ExportOptions.plist
        echo "‚úÖ Cleanup completed."
    - &build_apk
      name: Building Apk with Feature Flags
      script: |
        echo "üî¢ VERSION_NAME: $VERSION_NAME"
        echo "üî¢ VERSION_CODE: $VERSION_CODE"
         # Default values
        VERSION_NAME="${VERSION_NAME:-1.0.0}"
        VERSION_CODE="${VERSION_CODE:-100}"

        # Check if VERSION_NAME is empty or not set
        if [ -z "$VERSION_NAME" ]; then
          VERSION_NAME=$DEFAULT_VERSION_NAME
          echo "üî¢ Setting DEFAULT_VERSION_NAME"
        fi

        # Check if VERSION_CODE is empty or not set
        if [ -z "$VERSION_CODE" ]; then
          VERSION_CODE=$DEFAULT_VERSION_CODE
          echo "üî¢ Setting DEFAULT_VERSION_CODE"
        fi

        echo "üî¢ VERSION_NAME: $VERSION_NAME"
        echo "üî¢ VERSION_CODE: $VERSION_CODE"

        echo "üîß Ensuring valid version in pubspec.yaml: $VERSION_NAME+$VERSION_CODE"
        if grep -q "^version: " pubspec.yaml; then
          sed -i.bak -E "s/^version: .*/version: $VERSION_NAME+$VERSION_CODE/" pubspec.yaml
          else
        echo "version: $VERSION_NAME+$VERSION_CODE" >> pubspec.yaml
          fi

        flutter pub get
        if [ $? -ne 0 ]; then
        echo "‚ùå Failed to get Flutter dependencies"
        exit 1
        fi

        echo "‚úÖ Building APK..."
        flutter build apk \
            --release \
            --dart-define=WEB_URL="$WEB_URL" \
            --dart-define=PUSH_NOTIFY="$PUSH_NOTIFY" \
            --dart-define=PKG_NAME="$PKG_NAME" \
            --dart-define=APP_NAME="$APP_NAME" \
            --dart-define=ORG_NAME="$ORG_NAME" \
            --dart-define=VERSION_NAME="$VERSION_NAME" \
            --dart-define=VERSION_CODE="$VERSION_CODE" \
            --dart-define=EMAIL_ID="$EMAIL_ID" \
            --dart-define=IS_SPLASH="$IS_SPLASH" \
            --dart-define=SPLASH="$SPLASH" \
            --dart-define=SPLASH_BG="$SPLASH_BG" \
            --dart-define=SPLASH_ANIMATION="$SPLASH_ANIMATION" \
            --dart-define=SPLASH_BG_COLOR="$SPLASH_BG_COLOR" \
            --dart-define=SPLASH_TAGLINE="$SPLASH_TAGLINE" \
            --dart-define=SPLASH_TAGLINE_COLOR="$SPLASH_TAGLINE_COLOR" \
            --dart-define=SPLASH_DURATION="$SPLASH_DURATION" \
            --dart-define=IS_PULLDOWN="$IS_PULLDOWN" \
            --dart-define=LOGO_URL="$LOGO_URL" \
            --dart-define=IS_BOTTOMMENU="$IS_BOTTOMMENU" \
            --dart-define=BOTTOMMENU_ITEMS="$BOTTOMMENU_ITEMS" \
            --dart-define=BOTTOMMENU_BG_COLOR="$BOTTOMMENU_BG_COLOR" \
            --dart-define=BOTTOMMENU_ICON_COLOR="$BOTTOMMENU_ICON_COLOR" \
            --dart-define=BOTTOMMENU_TEXT_COLOR="$BOTTOMMENU_TEXT_COLOR" \
            --dart-define=BOTTOMMENU_ACTIVE_TAB_COLOR="$BOTTOMMENU_ACTIVE_TAB_COLOR" \
            --dart-define=BOTTOMMENU_ICON_POSITION="$BOTTOMMENU_ICON_POSITION" \
            --dart-define=BOTTOMMENU_VISIBLE_ON="$BOTTOMMENU_VISIBLE_ON" \
            --dart-define=IS_DEEPLINK="$IS_DEEPLINK" \
            --dart-define=IS_LOAD_IND="$IS_LOAD_IND" \
            --dart-define=IS_CAMERA="$IS_CAMERA" \
            --dart-define=IS_LOCATION="$IS_LOCATION" \
            --dart-define=IS_BIOMETRIC="$IS_BIOMETRIC" \
            --dart-define=IS_MIC="$IS_MIC" \
            --dart-define=IS_CONTACT="$IS_CONTACT" \
            --dart-define=IS_CALENDAR="$IS_CALENDAR" \
            --dart-define=IS_NOTIFICATION="$IS_NOTIFICATION" \
            --dart-define=IS_STORAGE="$IS_STORAGE" \
            --dart-define=firebase_config_android="$firebase_config_android" \
            --dart-define=firebase_config_ios="$firebase_config_ios" \
            --dart-define=APNS_KEY_ID="$APNS_KEY_ID" \
            --dart-define=APPLE_TEAM_ID="$APPLE_TEAM_ID" \
            --dart-define=APNS_AUTH_KEY_URL="$APNS_AUTH_KEY_URL" \
            --dart-define=KEY_STORE="$KEY_STORE" \
            --dart-define=CM_KEYSTORE_PASSWORD="$CM_KEYSTORE_PASSWORD" \
            --dart-define=CM_KEY_ALIAS="$CM_KEY_ALIAS" \
            --dart-define=CM_KEY_PASSWORD="$CM_KEY_PASSWORD" > flutter_build_apk.log
        if [ $? -ne 0 ]; then
        echo "‚ùå APK build failed"
        cat flutter_build.log
        exit 1
        fi
        echo "‚úÖ APK build completed."

    - &build_apk_release
      name: Building Apk with Feature Flags
      script: |
        echo "üî¢ VERSION_NAME: $VERSION_NAME"
        echo "üî¢ VERSION_CODE: $VERSION_CODE"
         # Default values
        VERSION_NAME="${VERSION_NAME:-1.0.0}"
        VERSION_CODE="${VERSION_CODE:-100}"

        # Check if VERSION_NAME is empty or not set
        if [ -z "$VERSION_NAME" ]; then
          VERSION_NAME=$DEFAULT_VERSION_NAME
          echo "üî¢ Setting DEFAULT_VERSION_NAME"
        fi

        # Check if VERSION_CODE is empty or not set
        if [ -z "$VERSION_CODE" ]; then
          VERSION_CODE=$DEFAULT_VERSION_CODE
          echo "üî¢ Setting DEFAULT_VERSION_CODE"
        fi

        echo "üî¢ VERSION_NAME: $VERSION_NAME"
        echo "üî¢ VERSION_CODE: $VERSION_CODE"

        echo "üîß Ensuring valid version in pubspec.yaml: $VERSION_NAME+$VERSION_CODE"
        if grep -q "^version: " pubspec.yaml; then
          sed -i.bak -E "s/^version: .*/version: $VERSION_NAME+$VERSION_CODE/" pubspec.yaml
          else
        echo "version: $VERSION_NAME+$VERSION_CODE" >> pubspec.yaml
          fi

        flutter pub get
        if [ $? -ne 0 ]; then
        echo "‚ùå Failed to get Flutter dependencies"
        exit 1
        fi

        echo "‚úÖ Building APK..."
        flutter build apk \
            --release \
            --dart-define=WEB_URL="$WEB_URL" \
            --dart-define=PUSH_NOTIFY="$PUSH_NOTIFY" \
            --dart-define=PKG_NAME="$PKG_NAME" \
            --dart-define=APP_NAME="$APP_NAME" \
            --dart-define=ORG_NAME="$ORG_NAME" \
            --dart-define=VERSION_NAME="$VERSION_NAME" \
            --dart-define=VERSION_CODE="$VERSION_CODE" \
            --dart-define=EMAIL_ID="$EMAIL_ID" \
            --dart-define=IS_SPLASH="$IS_SPLASH" \
            --dart-define=SPLASH="$SPLASH" \
            --dart-define=SPLASH_BG="$SPLASH_BG" \
            --dart-define=SPLASH_ANIMATION="$SPLASH_ANIMATION" \
            --dart-define=SPLASH_BG_COLOR="$SPLASH_BG_COLOR" \
            --dart-define=SPLASH_TAGLINE="$SPLASH_TAGLINE" \
            --dart-define=SPLASH_TAGLINE_COLOR="$SPLASH_TAGLINE_COLOR" \
            --dart-define=SPLASH_DURATION="$SPLASH_DURATION" \
            --dart-define=IS_PULLDOWN="$IS_PULLDOWN" \
            --dart-define=LOGO_URL="$LOGO_URL" \
            --dart-define=IS_BOTTOMMENU="$IS_BOTTOMMENU" \
            --dart-define=BOTTOMMENU_ITEMS="$BOTTOMMENU_ITEMS" \
            --dart-define=BOTTOMMENU_BG_COLOR="$BOTTOMMENU_BG_COLOR" \
            --dart-define=BOTTOMMENU_ICON_COLOR="$BOTTOMMENU_ICON_COLOR" \
            --dart-define=BOTTOMMENU_TEXT_COLOR="$BOTTOMMENU_TEXT_COLOR" \
            --dart-define=BOTTOMMENU_ACTIVE_TAB_COLOR="$BOTTOMMENU_ACTIVE_TAB_COLOR" \
            --dart-define=BOTTOMMENU_ICON_POSITION="$BOTTOMMENU_ICON_POSITION" \
            --dart-define=BOTTOMMENU_VISIBLE_ON="$BOTTOMMENU_VISIBLE_ON" \
            --dart-define=IS_DEEPLINK="$IS_DEEPLINK" \
            --dart-define=IS_LOAD_IND="$IS_LOAD_IND" \
            --dart-define=IS_CAMERA="$IS_CAMERA" \
            --dart-define=IS_LOCATION="$IS_LOCATION" \
            --dart-define=IS_BIOMETRIC="$IS_BIOMETRIC" \
            --dart-define=IS_MIC="$IS_MIC" \
            --dart-define=IS_CONTACT="$IS_CONTACT" \
            --dart-define=IS_CALENDAR="$IS_CALENDAR" \
            --dart-define=IS_NOTIFICATION="$IS_NOTIFICATION" \
            --dart-define=IS_STORAGE="$IS_STORAGE" \
            --dart-define=firebase_config_android="$firebase_config_android" \
            --dart-define=firebase_config_ios="$firebase_config_ios" \
            --dart-define=APNS_KEY_ID="$APNS_KEY_ID" \
            --dart-define=APPLE_TEAM_ID="$APPLE_TEAM_ID" \
            --dart-define=APNS_AUTH_KEY_URL="$APNS_AUTH_KEY_URL" \
            --dart-define=KEY_STORE="$KEY_STORE" \
            --dart-define=CM_KEYSTORE_PASSWORD="$CM_KEYSTORE_PASSWORD" \
            --dart-define=CM_KEY_ALIAS="$CM_KEY_ALIAS" \
            --dart-define=CM_KEY_PASSWORD="$CM_KEY_PASSWORD" > flutter_build_apk.log
        if [ $? -ne 0 ]; then
        echo "‚ùå APK build failed"
        cat flutter_build.log
        exit 1
        fi
        echo "‚úÖ APK build completed."

        echo "‚úÖ Building AppBundle..."
        flutter build appbundle --release \
           --dart-define=WEB_URL="$WEB_URL" \
            --dart-define=PUSH_NOTIFY="$PUSH_NOTIFY" \
            --dart-define=PKG_NAME="$PKG_NAME" \
            --dart-define=APP_NAME="$APP_NAME" \
            --dart-define=ORG_NAME="$ORG_NAME" \
            --dart-define=VERSION_NAME="$VERSION_NAME" \
            --dart-define=VERSION_CODE="$VERSION_CODE" \
            --dart-define=EMAIL_ID="$EMAIL_ID" \
            --dart-define=IS_SPLASH="$IS_SPLASH" \
            --dart-define=SPLASH="$SPLASH" \
            --dart-define=SPLASH_BG="$SPLASH_BG" \
            --dart-define=SPLASH_ANIMATION="$SPLASH_ANIMATION" \
            --dart-define=SPLASH_BG_COLOR="$SPLASH_BG_COLOR" \
            --dart-define=SPLASH_TAGLINE="$SPLASH_TAGLINE" \
            --dart-define=SPLASH_TAGLINE_COLOR="$SPLASH_TAGLINE_COLOR" \
            --dart-define=SPLASH_DURATION="$SPLASH_DURATION" \
            --dart-define=IS_PULLDOWN="$IS_PULLDOWN" \
            --dart-define=LOGO_URL="$LOGO_URL" \
            --dart-define=IS_BOTTOMMENU="$IS_BOTTOMMENU" \
            --dart-define=BOTTOMMENU_ITEMS="$BOTTOMMENU_ITEMS" \
            --dart-define=BOTTOMMENU_BG_COLOR="$BOTTOMMENU_BG_COLOR" \
            --dart-define=BOTTOMMENU_ICON_COLOR="$BOTTOMMENU_ICON_COLOR" \
            --dart-define=BOTTOMMENU_TEXT_COLOR="$BOTTOMMENU_TEXT_COLOR" \
            --dart-define=BOTTOMMENU_ACTIVE_TAB_COLOR="$BOTTOMMENU_ACTIVE_TAB_COLOR" \
            --dart-define=BOTTOMMENU_ICON_POSITION="$BOTTOMMENU_ICON_POSITION" \
            --dart-define=BOTTOMMENU_VISIBLE_ON="$BOTTOMMENU_VISIBLE_ON" \
            --dart-define=IS_DEEPLINK="$IS_DEEPLINK" \
            --dart-define=IS_LOAD_IND="$IS_LOAD_IND" \
            --dart-define=IS_CAMERA="$IS_CAMERA" \
            --dart-define=IS_LOCATION="$IS_LOCATION" \
            --dart-define=IS_BIOMETRIC="$IS_BIOMETRIC" \
            --dart-define=IS_MIC="$IS_MIC" \
            --dart-define=IS_CONTACT="$IS_CONTACT" \
            --dart-define=IS_CALENDAR="$IS_CALENDAR" \
            --dart-define=IS_NOTIFICATION="$IS_NOTIFICATION" \
            --dart-define=IS_STORAGE="$IS_STORAGE" \
            --dart-define=firebase_config_android="$firebase_config_android" \
            --dart-define=firebase_config_ios="$firebase_config_ios" \
            --dart-define=APNS_KEY_ID="$APNS_KEY_ID" \
            --dart-define=APPLE_TEAM_ID="$APPLE_TEAM_ID" \
            --dart-define=APNS_AUTH_KEY_URL="$APNS_AUTH_KEY_URL" \
            --dart-define=KEY_STORE="$KEY_STORE" \
            --dart-define=CM_KEYSTORE_PASSWORD="$CM_KEYSTORE_PASSWORD" \
            --dart-define=CM_KEY_ALIAS="$CM_KEY_ALIAS" \
            --dart-define=CM_KEY_PASSWORD="$CM_KEY_PASSWORD" > flutter_build_aab.log
        if [ $? -ne 0 ]; then
        echo "‚ùå AppBundle build failed"
        cat flutter_build2.log
        exit 1
        fi
        echo "‚úÖ AppBundle build completed."

    - &key_store
      name: Setup Android keystore and insert Gradle signing block
      script: |
        echo "üì¶ Downloading keystore..."
        if curl -f -o android/app/keystore.jks "$KEY_STORE"; then
          echo "‚úÖ Keystore downloaded successfully."
        else
          echo "‚ùå Failed to download keystore."
          exit 1
        fi

        echo "üìù Writing key.properties..."
        cat > android/key.properties <<EOF
        storeFile=keystore.jks
        storePassword=$CM_KEYSTORE_PASSWORD
        keyAlias=$CM_KEY_ALIAS
        keyPassword=$CM_KEY_PASSWORD
        EOF

        if [ -f android/key.properties ]; then
          echo "‚úÖ key.properties written successfully."
        else
          echo "‚ùå Failed to write key.properties."
          exit 1
        fi

        echo "üì¶ Injecting dynamic signing configs..."

          GRADLE_FILE="android/app/build.gradle"
          SIGNING_BLOCK=$(cat <<EOF
          release {
          storeFile file("keystore.jks")
          storePassword project.findProperty("storePassword")
          keyAlias project.findProperty("keyAlias")
          keyPassword project.findProperty("keyPassword")
          }
          EOF
          )
          
          BUILD_TYPE_BLOCK=$(cat <<EOF
          release {
          signingConfig signingConfigs.release
          shrinkResources true
          minifyEnabled true
          proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
          }
          EOF
          )
          
        # Inject into signingConfigs
        if grep -q "signingConfigs" "$GRADLE_FILE"; then
          awk -v block="$SIGNING_BLOCK" '
          /signingConfigs[ \t]*{/ && !x { print; print block; x=1; next }1
          ' "$GRADLE_FILE" > tmp && mv tmp "$GRADLE_FILE"
          echo "‚úÖ Signing config injected."
        else
          echo "‚ùå signingConfigs block not found in build.gradle"
          exit 1
        fi

        # Inject into buildTypes
        if grep -q "buildTypes" "$GRADLE_FILE"; then
          awk -v block="$BUILD_TYPE_BLOCK" '
          /buildTypes[ \t]*{/ && !x { print; print block; x=1; next }1
          ' "$GRADLE_FILE" > tmp && mv tmp "$GRADLE_FILE"
          echo "‚úÖ Release build type injected."
        else
          echo "‚ùå buildTypes block not found in build.gradle"
          exit 1
        fi
    - &Setup_IOS
      name: Setting Up IOS Build
      script: |
        echo "üîê Setting up iOS code signing..."

        export LC_ALL=en_US.UTF-8
        export LANG=en_US.UTF-8

        KEYCHAIN_PASSWORD="temp_key_pass"
        KEYCHAIN_NAME="ios-signing.keychain"

        # Download and import certificate
        echo "üì• Downloading certificate..."
        curl -o signing_cert.p12 "$CERT_URL"

        echo "üîê Creating temporary keychain..."
        security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
        security default-keychain -s "$KEYCHAIN_NAME"
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
        security set-keychain-settings -t 3600 -u "$KEYCHAIN_NAME"

        # Import the certificate to the keychain
        echo "üîë Importing certificate..."
        security import signing_cert.p12 -k "$KEYCHAIN_NAME" -P "$CERT_PASSWORD" -T /usr/bin/codesign

        # Trust the keychain for signing tools
        echo "‚úÖ Trusting keychain for code signing..."
        security list-keychains -s "$KEYCHAIN_NAME"
        security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"

        # Extract CODE_SIGN_IDENTITY
        echo "üîç Extracting code signing identity from keychain..."
        CODE_SIGN_IDENTITY=$(security find-identity -v -p codesigning "$KEYCHAIN_NAME" | grep -o '".*"' | head -n 1 | tr -d '"')
        echo "‚úÖ CODE_SIGN_IDENTITY: $CODE_SIGN_IDENTITY"
        if [ -z "$CODE_SIGN_IDENTITY" ]; then
        echo "‚ùå Failed to extract CODE_SIGN_IDENTITY"
        exit 1
        fi

        # Download provisioning profile
        echo "üì• Downloading provisioning profile..."
        curl -o profile.mobileprovision "$PROFILE_URL"

        # Extract UUID of the provisioning profile
        UUID=$(/usr/libexec/PlistBuddy -c "Print UUID" /dev/stdin <<< "$(security cms -D -i profile.mobileprovision)")
        echo "‚úÖ Provisioning Profile UUID: $UUID"

        PROFILE_PATH=~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp profile.mobileprovision "$PROFILE_PATH"

        # Update iOS deployment target
        echo "üîß Updating iOS deployment target to 13.0 in Podfile..."
        sed -i '' 's/platform :ios, .*/platform :ios, "13.0"/' ios/Podfile

        # CocoaPods setup
        echo "üõ†Ô∏è Setting up CocoaPods and Flutter dependencies..."
        flutter clean
        rm -rf ios/Pods ios/Podfile.lock ~/Library/Caches/CocoaPods ~/.cocoapods/repos

        set -x
        gem install cocoapods --pre --silent
        gem install securerandom -v 0.3.2 --silent
        pod install --project-directory=ios
        flutter pub get
        set +x

        # Build Flutter iOS app (no code signing)
        flutter build ios --release --no-codesign

        # Archive app with manual signing
        echo "üì¶ Archiving app with code signing..."
        xcodebuild -workspace ios/Runner.xcworkspace \
        -scheme Runner \
        -configuration Release \
        -sdk iphoneos \
        -destination "generic/platform=iOS" \
        -archivePath build/ios/archive/Runner.xcarchive \
        CODE_SIGN_STYLE=Manual \
        DEVELOPMENT_TEAM="$APPLE_TEAM_ID" \
        PROVISIONING_PROFILE_SPECIFIER="$UUID" \
        PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
        CODE_SIGN_IDENTITY="$CODE_SIGN_IDENTITY" \
        OTHER_CODE_SIGN_FLAGS="--keychain ~/Library/Keychains/$KEYCHAIN_NAME-db" \
        archive

        # Create ExportOptions.plist
        cat <<EOF > ExportOptions.plist
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN"
        "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
        <key>method</key>
        <string>ad-hoc</string>
        <key>provisioningProfiles</key>
        <dict>
        <key>$BUNDLE_ID</key>
        <string>$UUID</string>
        </dict>
        <key>signingStyle</key>
        <string>manual</string>
        <key>teamID</key>
        <string>$APPLE_TEAM_ID</string>
        </dict>
        </plist>
        EOF

        # Export IPA
        echo "üì¶ Exporting IPA..."
        xcodebuild -exportArchive \
        -archivePath build/ios/archive/Runner.xcarchive \
        -exportPath build/ios/ipa \
        -exportOptionsPlist ExportOptions.plist

        echo "‚úÖ IPA export complete: build/ios/ipa"

        # Cleanup
        echo "üßπ Cleaning up..."
        security delete-keychain "$KEYCHAIN_NAME"
        rm -f signing_cert.p12 profile.mobileprovision ExportOptions.plist

        echo "üéâ Done!"

    - &setup_ios_signing_manual
      name: Setting Up iOS Signing (Manual)
      script: |
        echo "üîê Setting up iOS code signing..."
        export LC_ALL=en_US.UTF-8
        export LANG=en_US.UTF-8

        KEYCHAIN_PASSWORD="temp_key_pass"
        KEYCHAIN_NAME="ios-signing.keychain"

        # Download and import certificate
        echo "üì• Downloading certificate..."
        curl -o signing_cert.p12 "$CERT_URL"

        echo "üîê Creating temporary keychain..."
        security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
        security default-keychain -s "$KEYCHAIN_NAME"
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
        security set-keychain-settings -t 3600 -u "$KEYCHAIN_NAME"

        # Import the certificate to the keychain
        echo "üîë Importing certificate..."
        security import signing_cert.p12 -k "$KEYCHAIN_NAME" -P "$CERT_PASSWORD" -T /usr/bin/codesign

        echo "üîç Verifying imported certificate..."
        security find-identity -v -p codesigning "$KEYCHAIN_NAME"

        # Download provisioning profile
        echo "üì• Downloading provisioning profile..."
        curl -o profile.mobileprovision "$PROFILE_URL"

        # Get the UUID of the provisioning profile
        UUID=$(/usr/libexec/PlistBuddy -c "Print UUID" /dev/stdin <<< $(security cms -D -i profile.mobileprovision))
        echo "‚úÖ Profile UUID: $UUID"

        PROFILE_PATH=~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp profile.mobileprovision "$PROFILE_PATH"

        # Set the keychain to be trusted for code signing
        echo "‚úÖ Trusting keychain for code signing..."
        security list-keychains -s "$KEYCHAIN_NAME"
        security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
        security find-identity -v -p codesigning

        echo "üîß Updating iOS deployment target to 13.0 in Podfile..."
        sed -i '' 's/platform :ios, .*/platform :ios, "13.0"/' ios/Podfile
        cat ios/Podfile | grep platform

          # Flutter build
          echo "‚öôÔ∏è Building Flutter iOS project..."
          flutter build ios --release --no-codesign \
          --dart-define=WEB_URL="$WEB_URL" \
          --dart-define=PUSH_NOTIFY="$PUSH_NOTIFY" \
          --dart-define=PKG_NAME="$PKG_NAME" \
          --dart-define=APP_NAME="$APP_NAME" \
          --dart-define=ORG_NAME="$ORG_NAME" \
          --dart-define=VERSION_NAME="$VERSION_NAME" \
          --dart-define=VERSION_CODE="$VERSION_CODE" \
          --dart-define=EMAIL_ID="$EMAIL_ID" \
          --dart-define=IS_SPLASH="$IS_SPLASH" \
          --dart-define=SPLASH="$SPLASH" \
          --dart-define=SPLASH_BG="$SPLASH_BG" \
          --dart-define=SPLASH_ANIMATION="$SPLASH_ANIMATION" \
          --dart-define=SPLASH_BG_COLOR="$SPLASH_BG_COLOR" \
          --dart-define=SPLASH_TAGLINE="$SPLASH_TAGLINE" \
          --dart-define=SPLASH_TAGLINE_COLOR="$SPLASH_TAGLINE_COLOR" \
          --dart-define=SPLASH_DURATION="$SPLASH_DURATION" \
          --dart-define=IS_PULLDOWN="$IS_PULLDOWN" \
          --dart-define=LOGO_URL="$LOGO_URL" \
          --dart-define=IS_BOTTOMMENU="$IS_BOTTOMMENU" \
          --dart-define=BOTTOMMENU_ITEMS="$BOTTOMMENU_ITEMS" \
          --dart-define=BOTTOMMENU_BG_COLOR="$BOTTOMMENU_BG_COLOR" \
          --dart-define=BOTTOMMENU_ICON_COLOR="$BOTTOMMENU_ICON_COLOR" \
          --dart-define=BOTTOMMENU_TEXT_COLOR="$BOTTOMMENU_TEXT_COLOR" \
          --dart-define=BOTTOMMENU_ACTIVE_TAB_COLOR="$BOTTOMMENU_ACTIVE_TAB_COLOR" \
          --dart-define=BOTTOMMENU_ICON_POSITION="$BOTTOMMENU_ICON_POSITION" \
          --dart-define=BOTTOMMENU_VISIBLE_ON="$BOTTOMMENU_VISIBLE_ON" \
          --dart-define=IS_DEEPLINK="$IS_DEEPLINK" \
          --dart-define=IS_LOAD_IND="$IS_LOAD_IND" \
          --dart-define=IS_CAMERA="$IS_CAMERA" \
          --dart-define=IS_LOCATION="$IS_LOCATION" \
          --dart-define=IS_BIOMETRIC="$IS_BIOMETRIC" \
          --dart-define=IS_MIC="$IS_MIC" \
          --dart-define=IS_CONTACT="$IS_CONTACT" \
          --dart-define=IS_CALENDAR="$IS_CALENDAR" \
          --dart-define=IS_NOTIFICATION="$IS_NOTIFICATION" \
          --dart-define=IS_STORAGE="$IS_STORAGE" \
          --dart-define=APNS_KEY_ID="$APNS_KEY_ID" \
          --dart-define=APPLE_TEAM_ID="$APPLE_TEAM_ID" \
          --dart-define=APNS_AUTH_KEY_URL="$APNS_AUTH_KEY_URL" \
          --dart-define=KEY_STORE="$KEY_STORE" \
          --dart-define=CM_KEYSTORE_PASSWORD="$CM_KEYSTORE_PASSWORD" \
          --dart-define=CM_KEY_ALIAS="$CM_KEY_ALIAS" \
          --dart-define=CM_KEY_PASSWORD="$CM_KEY_PASSWORD"
          
          # Extract CODE_SIGN_IDENTITY from the .p12 file
          security import signing_cert.p12 -k "$KEYCHAIN_NAME" -P "$CERT_PASSWORD" -T /usr/bin/codesign
          CODE_SIGN_IDENTITY=$(security find-identity -v -p codesigning "$KEYCHAIN_NAME" | awk '{print $2}' | head -n 1)
          echo "CODE_SIGN_IDENTITY=$CODE_SIGN_IDENTITY"
          
          echo "üõ†Ô∏è Setting UTF-8 encoding for CocoaPods..."
          export LANG=en_US.UTF-8
          export LC_ALL=en_US.UTF-8
          flutter clean
          rm -rf ios/Pods ios/Podfile.lock ~/Library/Caches/CocoaPods ~/.cocoapods/repos
          sudo gem install cocoapods
          cd ios
          pod reintegrate
          pod install --repo-update
          cd ..
          flutter pub get
          
           # Archive the app
            echo "üì¶ Archiving app with CodeSigning the IPA File..."
            xcodebuild -workspace ios/Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -archivePath build/ios/archive/Runner.xcarchive \
            archive \
            CODE_SIGN_STYLE=Manual \
            DEVELOPMENT_TEAM="$APPLE_TEAM_ID" \
            PROVISIONING_PROFILE_SPECIFIER="$UUID" \
            PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
            CODE_SIGN_IDENTITY="$CODE_SIGN_IDENTITY"

            # ExportOptions.plist
            cat <<EOF > ExportOptions.plist
            <?xml version="1.0" encoding="UTF-8"?>
            <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN"
            "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
            <plist version="1.0">
            <dict>
            <key>method</key>
            <string>ad-hoc</string>
            <key>provisioningProfiles</key>
            <dict>
            <key>$BUNDLE_ID</key>
            <string>$UUID</string>
            </dict>
            <key>signingStyle</key>
            <string>manual</string>
            <key>teamID</key>
            <string>$APPLE_TEAM_ID</string>
            </dict>
            </plist>
            EOF

            # Export the IPA
            echo "üì¶ Exporting IPA..."
            xcodebuild -exportArchive \
            -archivePath build/ios/archive/Runner.xcarchive \
            -exportPath build/ios/ipa \
            -exportOptionsPlist ExportOptions.plist

            echo "‚úÖ IPA export complete: build/ios/ipa"
            security delete-keychain "$KEYCHAIN_NAME"
            rm signing_cert.p12 profile.mobileprovision

    #  --------------------------------------------
    #        echo "üîê Setting up iOS signing (manual)..."
    #
    #            mkdir -p ios_certificates
    #
    #            echo "‚¨áÔ∏è Downloading .p12 certificate..."
    #            if [ -z "$CERT_URL" ]; then
    #            echo "‚ùå CERT_URL is not set."
    #            exit 1
    #            fi
    #            curl -f -o ios_certificates/certificate.p12 "$CERT_URL"
    #            echo "‚úÖ .p12 certificate downloaded successfully."
    #
    #            echo "‚¨áÔ∏è Downloading provisioning profile..."
    #            if [ -z "$PROFILE_URL" ]; then
    #            echo "‚ùå PROFILE_URL is not set."
    #            exit 1
    #            fi
    #            curl -f -o ios_certificates/profile.mobileprovision "$PROFILE_URL"
    #            echo "‚úÖ Provisioning profile downloaded successfully."
    #
    #            echo "üîê Creating and unlocking custom keychain..."
    #            security create-keychain -p "" build.keychain
    #            security default-keychain -s build.keychain
    #            security unlock-keychain -p "" build.keychain
    #            security set-keychain-settings -lut 21600 build.keychain
    #
    #            echo "üîê Importing certificate into custom keychain..."
    #            security import ios_certificates/certificate.p12 -k build.keychain -P "$CERT_PASSWORD" -A -T /usr/bin/codesign -T /usr/bin/security
    #            security set-key-partition-list -S apple-tool:,apple:,codesign -s -k "" build.keychain
    #            security list-keychains -d user -s build.keychain
    #            echo "‚úÖ Certificate imported and trusted for code signing."
    #
    #            echo "üìã Extracting UUID and Name from provisioning profile..."
    #            security cms -D -i ios_certificates/profile.mobileprovision -o ios_certificates/profile.plist
    #
    #         PROFILE_UUID=$(/usr/libexec/PlistBuddy -c "Print UUID" ios_certificates/profile.plist)
    #         PROFILE_NAME=$(/usr/libexec/PlistBuddy -c "Print Name" ios_certificates/profile.plist)
    #
    #         if [ -z "$PROFILE_UUID" ] || [ -z "$PROFILE_NAME" ]; then
    #            echo "‚ùå Failed to extract UUID or Name from provisioning profile."
    #            exit 1
    #         fi
    #
    #          echo "‚úÖ Profile UUID: $PROFILE_UUID"
    #          echo "‚úÖ Profile Name: $PROFILE_NAME"
    #
    #          echo "üîç Validating provisioning profile matches app bundle ID..."
    #          PROFILE_APP_ID_PREFIX=$(/usr/libexec/PlistBuddy -c "Print :Entitlements:application-identifier" ios_certificates/profile.plist)
    #          EXPECTED_APP_ID="$APPLE_TEAM_ID.$PKG_NAME"
    #
    #          if [[ "$PROFILE_APP_ID_PREFIX" != "$EXPECTED_APP_ID" ]]; then
    #            echo "‚ùå Provisioning profile's App ID ($PROFILE_APP_ID_PREFIX) does not match expected ($EXPECTED_APP_ID)"
    #            exit 1
    #          else
    #            echo "‚úÖ Provisioning profile matches expected bundle ID: $PKG_NAME"
    #          fi
    #
    #         echo "üîç Verifying imported code signing identities..."
    #         VALID_IDENTITY=$(security find-identity -v -p codesigning build.keychain | grep "iPhone Distribution" | awk '{print $2}')
    #         if [ -z "$VALID_IDENTITY" ]; then
    #              echo "‚ùå No valid iPhone Distribution certificate found in the keychain."
    #              exit 1
    #         else
    #              echo "‚úÖ Found valid iPhone Distribution certificate: $VALID_IDENTITY"
    #         fi
    #
    #        echo "üìù Creating ExportOptions.plist..."
    #        cat > ExportOptions.plist <<EOF
    #        <?xml version="1.0" encoding="UTF-8"?>
    #        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
    #        <plist version="1.0">
    #        <dict>
    #        <key>method</key>
    #        <string>ad-hoc</string>
    #        <key>signingStyle</key>
    #        <string>manual</string>
    #        <key>provisioningProfiles</key>
    #        <dict>
    #        <key>$PKG_NAME</key>
    #        <string>$PROFILE_NAME</string>
    #        </dict>
    #        <key>teamID</key>
    #        <string>$APPLE_TEAM_ID</string>
    #        </dict>
    #        </plist>
    #        EOF
    #        echo "‚úÖ ExportOptions.plist created."
    #
    #        echo "üîë Setting up provisioning profile for build..."
    #        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
    #        cp ios_certificates/profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
    #
    #        # ‚ö†Ô∏è Keychain visibility fix
    #        KEYCHAIN_PATH="$HOME/Library/Keychains/build.keychain-db"
    #         security list-keychains -d user -s "$KEYCHAIN_PATH"
    #         security default-keychain -s "$KEYCHAIN_PATH"
    #
    #         # Optional debug output
    #         echo "üîç Active signing identities:"
    #         security find-identity -v -p codesigning "$KEYCHAIN_PATH"
    #
    #         echo "‚úÖ Building iOS IPA..."
    #          flutter build ipa \
    #                --release \
    #                --dart-define=WEB_URL="$WEB_URL" \
    #                --dart-define=PUSH_NOTIFY="$PUSH_NOTIFY" \
    #                --dart-define=PKG_NAME="$PKG_NAME" \
    #                --dart-define=APP_NAME="$APP_NAME" \
    #                --dart-define=ORG_NAME="$ORG_NAME" \
    #                --dart-define=VERSION_NAME="$VERSION_NAME" \
    #                --dart-define=VERSION_CODE="$VERSION_CODE" \
    #                --dart-define=EMAIL_ID="$EMAIL_ID" \
    #                --dart-define=IS_SPLASH="$IS_SPLASH" \
    #                --dart-define=SPLASH="$SPLASH" \
    #                --dart-define=SPLASH_BG="$SPLASH_BG" \
    #                --dart-define=SPLASH_ANIMATION="$SPLASH_ANIMATION" \
    #                --dart-define=SPLASH_BG_COLOR="$SPLASH_BG_COLOR" \
    #                --dart-define=SPLASH_TAGLINE="$SPLASH_TAGLINE" \
    #                --dart-define=SPLASH_TAGLINE_COLOR="$SPLASH_TAGLINE_COLOR" \
    #                --dart-define=SPLASH_DURATION="$SPLASH_DURATION" \
    #                --dart-define=IS_PULLDOWN="$IS_PULLDOWN" \
    #                --dart-define=LOGO_URL="$LOGO_URL" \
    #                --dart-define=IS_BOTTOMMENU="$IS_BOTTOMMENU" \
    #                --dart-define=BOTTOMMENU_ITEMS="$BOTTOMMENU_ITEMS" \
    #                --dart-define=BOTTOMMENU_BG_COLOR="$BOTTOMMENU_BG_COLOR" \
    #                --dart-define=BOTTOMMENU_ICON_COLOR="$BOTTOMMENU_ICON_COLOR" \
    #                --dart-define=BOTTOMMENU_TEXT_COLOR="$BOTTOMMENU_TEXT_COLOR" \
    #                --dart-define=BOTTOMMENU_ACTIVE_TAB_COLOR="$BOTTOMMENU_ACTIVE_TAB_COLOR" \
    #                --dart-define=BOTTOMMENU_ICON_POSITION="$BOTTOMMENU_ICON_POSITION" \
    #                --dart-define=BOTTOMMENU_VISIBLE_ON="$BOTTOMMENU_VISIBLE_ON" \
    #                --dart-define=IS_DEEPLINK="$IS_DEEPLINK" \
    #                --dart-define=IS_LOAD_IND="$IS_LOAD_IND" \
    #                --dart-define=IS_CAMERA="$IS_CAMERA" \
    #                --dart-define=IS_LOCATION="$IS_LOCATION" \
    #                --dart-define=IS_BIOMETRIC="$IS_BIOMETRIC" \
    #                --dart-define=IS_MIC="$IS_MIC" \
    #                --dart-define=IS_CONTACT="$IS_CONTACT" \
    #                --dart-define=IS_CALENDAR="$IS_CALENDAR" \
    #                --dart-define=IS_NOTIFICATION="$IS_NOTIFICATION" \
    #                --dart-define=IS_STORAGE="$IS_STORAGE" \
    #                --dart-define=APNS_KEY_ID="$APNS_KEY_ID" \
    #                --dart-define=APPLE_TEAM_ID="$APPLE_TEAM_ID" \
    #                --dart-define=APNS_AUTH_KEY_URL="$APNS_AUTH_KEY_URL" \
    #                --dart-define=KEY_STORE="$KEY_STORE" \
    #                --dart-define=CM_KEYSTORE_PASSWORD="$CM_KEYSTORE_PASSWORD" \
    #                --dart-define=CM_KEY_ALIAS="$CM_KEY_ALIAS" \
    #                --dart-define=CM_KEY_PASSWORD="$CM_KEY_PASSWORD" \
    #                --export-options-plist=ExportOptions.plist > flutter_build_ios.log
    #
    #          echo "‚úÖ IPA build completed."
    #
    #          echo "üßπ Cleaning up certificates and profiles..."
    #          security delete-keychain build.keychain
    #           rm -rf ios_certificates
    #           rm -f ExportOptions.plist
    #          echo "‚úÖ Cleanup completed."

    - &setup_ios_signing_manual3
      name: Setting Up iOS Signing (Manual)
      script: |
        echo "üîê Setting up iOS signing (manual)..."

        mkdir -p ios_certificates

        echo "‚¨áÔ∏è Downloading .p12 certificate..."
        if [ -z "$CERT_URL" ]; then
        echo "‚ùå CERT_URL is not set."
        exit 1
        fi
        curl -f -o ios_certificates/certificate.p12 "$CERT_URL"
        echo "‚úÖ .p12 certificate downloaded successfully."

        echo "‚¨áÔ∏è Downloading provisioning profile..."
        if [ -z "$PROFILE_URL" ]; then
        echo "‚ùå PROFILE_URL is not set."
        exit 1
        fi
        curl -f -o ios_certificates/profile.mobileprovision "$PROFILE_URL"
        echo "‚úÖ Provisioning profile downloaded successfully."

        echo "üîê Creating and unlocking custom keychain..."
        security create-keychain -p "" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "" build.keychain
        security set-keychain-settings -lut 21600 build.keychain

        echo "üîê Importing certificate into custom keychain..."
        security import ios_certificates/certificate.p12 -k build.keychain -P "$CERT_PASSWORD" -A -T /usr/bin/codesign -T /usr/bin/security
        security set-key-partition-list -S apple-tool:,apple:,codesign -s -k "" build.keychain
        security list-keychains -s build.keychain
        echo "‚úÖ Certificate imported and trusted for code signing."

        echo "üìã Extracting UUID and Name from provisioning profile..."
        security cms -D -i ios_certificates/profile.mobileprovision -o ios_certificates/profile.plist

        PROFILE_UUID=$(/usr/libexec/PlistBuddy -c "Print UUID" ios_certificates/profile.plist)
        PROFILE_NAME=$(/usr/libexec/PlistBuddy -c "Print Name" ios_certificates/profile.plist)

        if [ -z "$PROFILE_UUID" ] || [ -z "$PROFILE_NAME" ]; then
        echo "‚ùå Failed to extract UUID or Name from provisioning profile."
        exit 1
        fi

        echo "‚úÖ Profile UUID: $PROFILE_UUID"
        echo "‚úÖ Profile Name: $PROFILE_NAME"

        echo "üîç Validating provisioning profile matches app bundle ID..."

        PROFILE_APP_ID_PREFIX=$(/usr/libexec/PlistBuddy -c "Print :Entitlements:application-identifier" ios_certificates/profile.plist)
        EXPECTED_APP_ID="$APPLE_TEAM_ID.$PKG_NAME"

        if [[ "$PROFILE_APP_ID_PREFIX" != "$EXPECTED_APP_ID" ]]; then
        echo "‚ùå Provisioning profile's App ID ($PROFILE_APP_ID_PREFIX) does not match expected ($EXPECTED_APP_ID)"
        exit 1
        else
        echo "‚úÖ Provisioning profile matches expected bundle ID: $PKG_NAME"
        fi

        echo "üîç Verifying imported code signing identities..."
        security find-identity -v -p codesigning build.keychain

        # Match iPhone Distribution instead of Apple Distribution
        VALID_IDENTITY=$(security find-identity -v -p codesigning build.keychain | grep "iPhone Distribution" | awk '{print $2}')

        if [ -z "$VALID_IDENTITY" ]; then
        echo "‚ùå No valid iPhone Distribution certificate found in the keychain."
        exit 1
        else
        echo "‚úÖ Found valid iPhone Distribution certificate: $VALID_IDENTITY"
        fi
          
          echo "üìù Creating ExportOptions.plist..."
          cat > ExportOptions.plist <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
          <key>method</key>
          <string>ad-hoc</string>
          <key>signingStyle</key>
          <string>manual</string>
          <key>provisioningProfiles</key>
          <dict>
          <key>$PKG_NAME</key>
          <string>$PROFILE_NAME</string>
          </dict>
          <key>teamID</key>
          <string>$APPLE_TEAM_ID</string>
          </dict>
          </plist>
          EOF
          
          echo "‚úÖ ExportOptions.plist created."

    #        # Step 4: Clean previous keychains
    #        echo "üßπ Cleaning previous keychains..."
    #        security delete-keychain build.keychain 2>/dev/null || true
    #
    #        # Step 5: Create and configure the build keychain
    #        echo "üîë Importing certificate into dedicated keychain..."
    #        security create-keychain -p "" build.keychain
    #        security import ios_certificates/certificate.p12 -k build.keychain -P "$CERT_PASSWORD" -T /usr/bin/codesign
    #        echo "üîë Ensuring the certificate is accessible for code signing..."
    #        security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
    #        echo "üîì Unlocking the keychain..."
    #        security unlock-keychain -p "" build.keychain
    #        echo "üîß Setting keychain settings..."
    #        security list-keychains -s build.keychain
    #        security default-keychain -s build.keychain
    #
    #        # Step 6: Verify the certificate
    #        echo "üîß Verifying certificate in keychain..."
    #        security find-identity -p codesigning -v build.keychain
    #        VALID_IDENTITY_COUNT=$(security find-identity -p codesigning build.keychain | grep -cE 'iPhone (Developer|Distribution):')
    #        if [ "$VALID_IDENTITY_COUNT" -lt 1 ]; then
    #          echo "‚ùå No valid iOS code signing identity found in build.keychain."
    #          exit 1
    #        fi
    #
    #        # Step 7: Extract UUID and Name from the provisioning profile
    #        echo "üîç Extracting UUID and Name from the provisioning profile..."
    #        TEMP_PLIST="/tmp/profile.plist"
    #        security cms -D -i ios_certificates/profile.mobileprovision > "$TEMP_PLIST"
    #        PROFILE_UUID=$(/usr/libexec/PlistBuddy -c "Print UUID" "$TEMP_PLIST")
    #        PROFILE_NAME=$(/usr/libexec/PlistBuddy -c "Print Name" "$TEMP_PLIST")
    #
    #        if [ -z "$PROFILE_UUID" ] || [ -z "$PROFILE_NAME" ]; then
    #          echo "‚ùå Failed to extract UUID or Name from provisioning profile."
    #          exit 1
    #        fi
    #
    #        cp ios_certificates/profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/$PROFILE_UUID.mobileprovision
    #        echo "‚úÖ Provisioning profile installed as $PROFILE_UUID.mobileprovision"
    #
    #        echo "Team ID: $APPLE_TEAM_ID"
    #        echo "Bundle ID: $BUNDLE_ID"
    #        echo "PROFILE_NAME: $PROFILE_NAME"
    #        echo "PROFILE_UUID: $PROFILE_UUID"
    #
    #        # Step 8: Creating ExportOptions.plist
    #        echo "üìù Creating ExportOptions.plist..."
    #        cat > ExportOptions.plist <<EOF
    #        <?xml version="1.0" encoding="UTF-8"?>
    #        <plist version="1.0">
    #        <dict>
    #          <key>method</key>
    #          <string>${EXPORT_METHOD:-app-store}</string>
    #          <key>signingStyle</key>
    #          <string>manual</string>
    #          <key>provisioningProfiles</key>
    #          <dict>
    #            <key>$BUNDLE_ID</key>
    #            <string>$PROFILE_NAME</string>
    #          </dict>
    #          <key>teamID</key>
    #          <string>$APPLE_TEAM_ID</string>
    #          <key>signingCertificate</key>
    #          <string>iPhone Distribution</string>
    #          <key>compileBitcode</key>
    #          <false/>
    #          <key>stripSwiftSymbols</key>
    #          <true/>
    #          <key>thinning</key>
    #          <string>&lt;none&gt;</string>
    #        </dict>
    #        </plist>
    #        EOF
    #
    #        # Step 9: Build the iOS IPA
    #        echo "‚úÖ Building iOS IPA..."
    #        flutter build ipa \
    #          --release \
    #          --export-options-plist=ExportOptions.plist > flutter_build_ios.log
    #        if [ $? -ne 0 ]; then
    #          echo "‚ùå IPA build failed"
    #          cat flutter_build_ios.log
    #          exit 1
    #        fi
    #
    #        echo "‚úÖ IPA build completed successfully"
    #
    #        # Cleanup
    #        echo "üßπ Cleaning up certificates and profiles..."
    #        rm -rf ios_certificates
    #        rm -f ExportOptions.plist
    #        security delete-keychain build.keychain
    #
    #        echo "‚úÖ Cleanup completed."
    #

    - &Inject_iOS_Firebase_Push
      name: Setup iOS Firebase push notifications and APNs key
      script: |
        echo "üì¶ Setting up iOS Firebase Push Notifications..."

        if [[ -n "$firebase_config_ios" ]]; then
          echo "üîó Firebase Config URL: $firebase_config_ios"

          if [[ "$firebase_config_ios" =~ ^https:// ]]; then
            echo "‚¨áÔ∏è Downloading GoogleService-Info.plist..."
            wget -O ios/Runner/GoogleService-Info.plist "$firebase_config_ios"
            if [ $? -eq 0 ]; then
              echo "‚úÖ GoogleService-Info.plist placed in ios/Runner"
            else
              echo "‚ùå Failed to download GoogleService-Info.plist"
              exit 1
            fi
          else
            echo "‚ùå Error: Invalid URL format for firebase_config_ios"
            exit 1
          fi
        else
          echo "‚ö†Ô∏è GOOGLE_SERVICE_INFO_PLIST_URL not set, skipping plist injection"
        fi

        if [[ -n "$APNS_AUTH_KEY_URL" && -n "$APNS_KEY_ID" && -n "$APPLE_TEAM_ID" ]]; then
          echo "‚¨áÔ∏è Downloading APNs Auth Key (.p8)..."
          wget -O ios/AuthKey.p8 "$APNS_AUTH_KEY_URL"
          if [ $? -eq 0 ]; then
            echo "‚úÖ APNs Auth Key downloaded to ios/AuthKey.p8"
          else
            echo "‚ùå Failed to download APNs key"
            exit 1
          fi

          echo "üìù APNs Setup:"
          echo "  üîë Key ID: $APNS_KEY_ID"
          echo "  üßë‚Äçüíª Team ID: $APPLE_TEAM_ID"
          echo "  üì¶ File: ios/AuthKey.p8"
        else
          echo "‚ö†Ô∏è Missing APNs credentials, skipping .p8 key setup"
        fi

    - &Update_App_Version
      name: Update Version Info (Android & iOS)
      script: |
        # Generate dynamic version code using timestamp (or set default)
        VERSION_NAME="${VERSION_NAME:-1.0.0}"
        VERSION_CODE="${VERSION_CODE:-$(date +%Y%m%d%H%M)}" # Dynamic version code

        echo "üî¢ VERSION_NAME: $VERSION_NAME"
        echo "üî¢ VERSION_CODE: $VERSION_CODE"

        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Update version in pubspec.yaml ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        echo "üîß Updating pubspec.yaml..."
        if grep -q "^version: " pubspec.yaml; then
          sed -i'' -e "s/^version: .*/version: ${VERSION_NAME}+${VERSION_CODE}/" pubspec.yaml
        else
          echo "version: ${VERSION_NAME}+${VERSION_CODE}" >> pubspec.yaml
        fi
        echo "‚úÖ pubspec.yaml version updated."

        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Update version in Android build.gradle ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        echo "üîß Updating Android version in build.gradle..."
        sed -i'' -e "s/versionCode [0-9]\+/versionCode ${VERSION_CODE}/" android/app/build.gradle
        sed -i'' -e "s/versionName \".*\"/versionName \"${VERSION_NAME}\"/" android/app/build.gradle
        echo "‚úÖ Android version updated in build.gradle."

        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Update version in iOS project.pbxproj ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        IOS_PROJECT_FILE="ios/Runner.xcodeproj/project.pbxproj"
        if [ -f "$IOS_PROJECT_FILE" ]; then
          echo "üîß Updating iOS version in project.pbxproj..."
          sed -i'' -e "s/MARKETING_VERSION = .*;/MARKETING_VERSION = ${VERSION_NAME};/" "$IOS_PROJECT_FILE"
          sed -i'' -e "s/CURRENT_PROJECT_VERSION = .*;/CURRENT_PROJECT_VERSION = ${VERSION_CODE};/" "$IOS_PROJECT_FILE"
          echo "‚úÖ iOS version updated in project.pbxproj."
        else
          echo "‚ùå iOS project file not found at $IOS_PROJECT_FILE"
          exit 1
        fi
workflows:
  apk-workflow:
    name: Android Workflow Free & Paid APK
    max_build_duration: 30
    instance_type: mac_mini_m1
    environment:
      flutter: stable
    scripts:
      - *change_proj_name
      - *debug_env
      - *update_package_names
      - *change_app_name
      - *Update_SDK_Version
      - *get_json
      - *Inject_Firebase
      - *get_logo
      - *set_launcher_icons
      - *get_splash
      #      - *key_store
      - *Update_App_Version
      - name: Apply Fix for flutter_local_notifications Conflict
        script: |
          # Determine the correct path for .pub-cache in Codemagic
          NOTIFICATIONS_FILE="$(find $HOME/.pub-cache -type f -name 'FlutterLocalNotificationsPlugin.java' | head -n 1)"
          
          if [ -n "$NOTIFICATIONS_FILE" ]; then
          echo "Applying fix to FlutterLocalNotificationsPlugin.java..."
          sed -i 's/bigPictureStyle\.bigLargeIcon(null);/bigPictureStyle.bigLargeIcon((Bitmap) null);/' "$NOTIFICATIONS_FILE"
          else
          echo "FlutterLocalNotificationsPlugin.java not found. Skipping fix."
          fi

      - *build_apk
    artifacts:
      - *android_apk
      #      - *android_abb
      - flutter_build_apk.log
    #      - flutter_build_aab.log
    publishing: *email_release

  android-workflow:
    name: Android Workflow Release APK
    max_build_duration: 30
    instance_type: mac_mini_m1
    environment:
      flutter: stable
    scripts:
      - *change_proj_name
      - *debug_env
      - *update_package_names
      - *change_app_name
      - *Update_SDK_Version
      - *get_json
      - *Inject_Firebase
      - *get_logo
      - *set_launcher_icons
      - *get_splash
      - *Update_App_Version
      - *key_store
      - name: Apply Fix for flutter_local_notifications Conflict
        script: |
            echo "Looking for FlutterLocalNotificationsPlugin.java..."
NOTIFICATIONS_FILE="$(find $FCI_BUILD_DIR/.pub-cache -type f -name 'FlutterLocalNotificationsPlugin.java' 2>/dev/null || find $HOME/.pub-cache -type f -name 'FlutterLocalNotificationsPlugin.java' 2>/dev/null || echo '')"
if [ -f "$NOTIFICATIONS_FILE" ]; then
  echo "Found plugin at: $NOTIFICATIONS_FILE"
  echo "Applying fix to FlutterLocalNotificationsPlugin.java..."
  sed -i 's/bigPictureStyle\.bigLargeIcon(null);/bigPictureStyle.bigLargeIcon((Bitmap) null);/' "$NOTIFICATIONS_FILE"
  echo "Fix applied successfully"
else
  echo "FlutterLocalNotificationsPlugin.java not found. Skipping fix."
fi
      - *build_apk_release
    artifacts:
      - *android_apk
      - *android_abb
      - flutter_build_apk.log
      - flutter_build_aab.log
    publishing: *email_release

  ios-workflow:
    name: iOS Workflow
    max_build_duration: 30
    instance_type: mac_mini_m1
    environment:
      vars:
        XCODE_WORKSPACE: "Runner.xcworkspace"
        XCODE_SCHEME: "Runner"
        LANG: en_US.UTF-8
        LC_ALL: en_US.UTF-8
      flutter: stable
      xcode: latest
      cocoapods: default
    scripts:
      - *change_proj_name
      - *debug_env
      - *change_app_name
      - *Inject_iOS_Firebase_Push
      - *update_package_names
      - *Update_App_Version
      - *get_logo
      - *set_launcher_icons
      - *get_splash
      - *Update_SDK_Version
      - name: Set up code signing
        script: |
          echo "üîê Setting up iOS code signing..."

          # Create keychain
          KEYCHAIN_NAME="ios-build.keychain"
          KEYCHAIN_PASSWORD="temporary"
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
          security default-keychain -s "$KEYCHAIN_NAME"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
          security set-keychain-settings -t 3600 -l "$KEYCHAIN_NAME"

          # Import certificate
          echo "üì• Importing certificate..."
          security import certificate.p12 -k "$KEYCHAIN_NAME" -P "$CERT_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"

          # Set up provisioning profile
          echo "üì± Setting up provisioning profile..."
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

          # Get profile UUID
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c "Print :UUID" /dev/stdin <<< $(security cms -D -i profile.mobileprovision))
          echo "‚úÖ Profile UUID: $PROFILE_UUID"

          # Move profile to correct location
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/$PROFILE_UUID.mobileprovision

      - name: iOS build
        script: |
          echo "üèóÔ∏è Building iOS app..."
          cd ios
          pod install
          cd ..

          # Build IPA
          flutter build ipa \
            --release \
            --export-options-plist=ios/ExportOptions.plist
            
          # Clean up
          security delete-keychain "$KEYCHAIN_NAME"
          rm -f certificate.p12 profile.mobileprovision

    artifacts:
      - build/ios/ipa/*.ipa
      - /tmp/xcodebuild_logs/*.log
      - flutter_drive.log
    publishing: *email_release

  ios-and-android-workflow:
    name: ios and android workflow
    max_build_duration: 30
    instance_type: mac_mini_m1
    environment:
      flutter: stable
    scripts:
      #      - *pub_get
      - *debug_env
      - *change_app_name
      - *Inject_Firebase_iOS_Push
      - *Inject_Firebase
      - *update_package_names
      #      - *set_default_version
      - *Update_App_Version
      - *get_logo
      - *set_launcher_icons
      - *get_splash
      - *Update_SDK_Version
      - *build_apk
      - *build_ipa
    artifacts:
      - *android_apk
      - *android_abb
      - *ios_app
      - flutter_build.log
      - flutter_build2.log
      - fcm_token.txt
    #        - *android_abb
    publishing: *email_release
